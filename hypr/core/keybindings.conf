# --------------------------------------------------------
# KEYBINDINGS
# --------------------------------------------------------

# See https://wiki.hyprland.org/Configuring/Keywords/
# Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more

$mainMod = SUPER

bind = $mainMod, E, exec, $fileManager
bind = $mainMod, D, exec, $menu
bind = $mainMod, RETURN, exec, $terminal
bind = $mainMod, L, exec, $lockscreen
bind = $mainMod, Q, exec, $quicklinks 
bind = $mainMod, M, exec, uwsm stop
# bind = $mainMod, P, pseudo, # dwindle
# bind = $mainMod, J, togglesplit, # dwindle
bind = $mainMod, F, fullscreen
bind = $mainMod, N, exec, swaync-client -t 
bind = $mainMod, R, exec, obs --startrecording --minimize-to-tray
bind = $mainMod, P, exec, hyprpicker -a
bind = $mainMod SHIFT, Q, killactive,
bind = $mainMod SHIFT, SPACE, togglefloating,
bind = $mainMod SHIFT, N, exec, $terminal -e nvim $hyprlandConf
bind = $mainMod SHIFT, C, exec, code $hyprlandConf
bind = ,Print, exec, $screenshot 
bind = ,XF86PowerOff, exec, $powermenu

# Change focus on floating windows
bind= ALT, TAB, cyclenext
bind = ALT SHIFT, TAB, cyclenext, prev
bind= ALT, TAB, bringactivetotop
bind= ALT SHIFT, TAB, bringactivetotop

# mod+tab to go to previous workspace (like alt+tab in windows)
bind = $mainMod, TAB, workspace, previous

# Move focus with mainMod + arrow keys
bind = $mainMod, left, movefocus, l
bind = $mainMod, right, movefocus, r
bind = $mainMod, up, movefocus, u
bind = $mainMod, down, movefocus, d

# Move window
bind = $mainMod SHIFT, left, movewindow, l
bind = $mainMod SHIFT, right, movewindow, r
bind = $mainMod SHIFT, up, movewindow, u
bind = $mainMod SHIFT, down, movewindow, d

# Move windows (floating)
bind = $mainMod CTRL SHIFT, left, moveactive, -20 0
bind = $mainMod CTRL SHIFT, right, moveactive, 20 0
bind = $mainMod CTRL SHIFT, up, moveactive, 0 -20
bind = $mainMod CTRL SHIFT, down, moveactive, 0 20

# Resize windows
bind = $mainMod CTRL, right, resizeactive, 20 0
bind = $mainMod CTRL, left, resizeactive, -20 0
bind = $mainMod CTRL, up, resizeactive, 0 -20
bind = $mainMod CTRL, down, resizeactive, 0 20

# Special workspace (scratchpad)
bind = $mainMod, S, togglespecialworkspace, magic
bind = $mainMod SHIFT, S, movetoworkspace, special:magic
# bind = $mainMod, grave, togglespecialworkspace, dropdown
# bind = $mainMod SHIFT, grave, movetoworkspace, special:dropdown

# Scroll through existing workspaces
bind = $mainMod ALT, right, workspace, e+1
bind = $mainMod ALT, left, workspace, e-1

bind = $mainMod, mouse_down, workspace, e-1
bind = $mainMod, mouse_up, workspace, e+1

binds {
    drag_threshold = 10
}

# Move/resize and toggle floating windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow
# bindc = $mainMod, mouse:272, togglefloating

# Move/resize windows with mainMod + SHIFT + LMB/RMB and dragging
# bindm = $mainMod SHIFT, mouse:272, movewindow
# bindm = $mainMod SHIFT, mouse:273, resizewindow

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

# Laptop multimedia keys for volume and LCD brightness
bindel = ,XF86AudioRaiseVolume, exec, ~/Arch-dotfiles/scripts/volume_brightness.sh volume-up
bindel = ,XF86AudioLowerVolume, exec, ~/Arch-dotfiles/scripts/volume_brightness.sh volume-down
bindel = ,XF86AudioMute, exec, ~/Arch-dotfiles/scripts/volume_brightness.sh mute
bindel = ,XF86AudioMicMute, exec, ~/Arch-dotfiles/scripts/volume_brightness.sh mic-mute
bindel = ,XF86MonBrightnessUp, exec, ~/Arch-dotfiles/scripts/volume_brightness.sh brightness-up
bindel = ,XF86MonBrightnessDown, exec, ~/Arch-dotfiles/scripts/volume_brightness.sh brightness-down

# Requires playerctl
bindl = , XF86AudioNext, exec, playerctl next
bindl = , XF86AudioPause, exec, playerctl play-pause
bindl = , XF86AudioPlay, exec, playerctl play-pause
bindl = , XF86AudioPrev, exec, playerctl previous

# =============================================================
# Keyboard mouse support V1
# =============================================================
# Using CTRL+ALT+ARROW-KEYS
# binde = CTRL ALT, left, exec, ydotool mousemove -- -20 0 && sleep 0.1  # Left (fine)
# binde = CTRL ALT, down, exec, ydotool mousemove -- 0 20 && sleep 0.1   # Down (fine)
# binde = CTRL ALT, right, exec, ydotool mousemove -- 20 0 && sleep 0.1    # Right (fine)
# binde = CTRL ALT, up, exec, ydotool mousemove -- 0 -20 && sleep 0.1    # Up (fine)
# bind = , KP_Insert, exec, ydotool click 0x40 0x80                           # Left Click
# bind = , KP_Enter, exec, ydotool click 0x41 0x81                          # Right Click
# bind = , KP_Delete, exec, ydotool click 0x42 0x82                         # Middle Click
# bind = , KP_End, exec, sh -c 'if [ "$(cat /tmp/mouse_state)" = "40" ]; then echo "80" > /tmp/mouse_state && ydotool click 0x80; else echo "40" > /tmp/mouse_state && ydotool click 0x40; fi'
# # bind = , KP_9, exec, sudo ydotoold --socket-perm=0666 --socket-path=/run/user/1000/.ydotool_socket
# # bind = , KP_Add, exec, sudo pkill ydotoold

# =============================================================
# Keyboard mouse support V2 (Caps-lock toggle + Arrow Keys)
# =============================================================
# Enter mouse-control mode with Caps Lock
bind = , Caps_Lock, submap, mouse-control

# Outsite so I can still use it without the capslock :0
# Mouse clicks
bind = , KP_Insert, exec, ydotool click 0x40 0x80
bind = , KP_Enter, exec, ydotool click 0x41 0x81
bind = , KP_Delete, exec, ydotool click 0x42 0x82
bind = , KP_End, exec, sh -c 'if [ "$(cat /tmp/mouse_state)" = "40" ]; then echo "80" > /tmp/mouse_state && ydotool click 0x80; else echo "40" > /tmp/mouse_state && ydotool click 0x40; fi'

# Define the mouse-control submap
submap = mouse-control

# Normal speed (20px per press)
binde = , left, exec, ydotool mousemove -- -30 0 && sleep 0.1
binde = , down, exec, ydotool mousemove -- 0 30 && sleep 0.1
binde = , right, exec, ydotool mousemove -- 30 0 && sleep 0.1
binde = , up, exec, ydotool mousemove -- 0 -30 && sleep 0.1

# Slower speed with Shift (for precision)
binde = Shift, left, exec, ydotool mousemove -- -10 0 && sleep 0.1
binde = Shift, down, exec, ydotool mousemove -- 0 10 && sleep 0.1
binde = Shift, right, exec, ydotool mousemove -- 10 0 && sleep 0.1
binde = Shift, up, exec, ydotool mousemove -- 0 -10 && sleep 0.1

bind = , KP_Insert, exec, ydotool click 0x40 0x80
bind = , KP_Enter, exec, ydotool click 0x41 0x81
bind = , KP_Delete, exec, ydotool click 0x42 0x82
bind = , KP_End, exec, sh -c 'if [ "$(cat /tmp/mouse_state)" = "40" ]; then echo "80" > /tmp/mouse_state && ydotool click 0x80; else echo "40" > /tmp/mouse_state && ydotool click 0x40; fi'

# Exit mouse-control mode with Caps Lock
bind = , Caps_Lock, submap, reset

# Return to default submap
submap = reset
